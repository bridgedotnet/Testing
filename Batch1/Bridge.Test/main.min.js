Bridge.assembly("Bridge.Test.Bridge.ClientTest",function($asm){Bridge.define("Bridge.Test.Runtime.TestFixture$1",function(T){return{statics:{fields:{instanceFabric:null,fixtureFabric:Bridge.getDefaultValue(T)},props:{FixtureFabric:{get:function(){return Bridge.Test.Runtime.TestFixture$1(T).fixtureFabric==null&&(Bridge.Test.Runtime.TestFixture$1(T).fixtureFabric=Bridge.createInstance(T)),Bridge.Test.Runtime.TestFixture$1(T).fixtureFabric},set:function(value){Bridge.Test.Runtime.TestFixture$1(T).fixtureFabric=value}}},methods:{InstanceFabric:function(type){return Bridge.Test.Runtime.TestFixture$1(T).instanceFabric==null&&(Bridge.Test.Runtime.TestFixture$1(T).instanceFabric=Bridge.cast(Bridge.createInstance(type),Bridge.Test.Runtime.TestFixture$1(T))),Bridge.Test.Runtime.TestFixture$1(T).instanceFabric},BeforeTest:function(needInstance,assert,type,expectedCount,testContext){var $t,instance,fixtureContext;expectedCount===void 0&&(expectedCount=null);testContext===void 0&&(testContext=null);Bridge.Test.NUnit.Assert.assert=assert;System.Nullable.hasValue(expectedCount)&&assert.expect(System.Nullable.getValue(expectedCount));instance=Bridge.Test.Runtime.TestFixture$1(T).InstanceFabric(type);instance.Fixture=needInstance?Bridge.Test.Runtime.TestFixture$1(T).FixtureFabric:Bridge.getDefaultValue(T);fixtureContext=instance.GetContext();(testContext!=null||fixtureContext!=null)&&Bridge.Test.Runtime.ContextHelper.SetContext(assert,($t=new Bridge.Test.Runtime.Context,$t.FixtureCtx=fixtureContext,$t.TestCtx=testContext,$t));try{instance.SetUp()}catch($e1){$e1=System.Exception.create($e1);assert.ok(!1,"The test failed SetUp");throw $e1;}return instance}}},props:{Fixture:Bridge.getDefaultValue(T)},methods:{GetContext:function(){return null},SetUp:function(){},TearDown:function(){}}}});Bridge.define("Bridge.Test.Runtime.Context",{fields:{FixtureCtx:null,TestCtx:null,Stack:null}});Bridge.define("Bridge.Test.Runtime.ContextHelper",{statics:{fields:{contextName:null},ctors:{init:function(){this.contextName="BridgeTestContext"}},methods:{SetContext:function(assert,ctx){assert!=null&&(assert[Bridge.Test.Runtime.ContextHelper.contextName]=ctx)},GetTestId:function(details){return Bridge.as(details.testId,System.String)},GetAssert:function(){return Bridge.unbox(QUnit.config.current.assert)},GetContext$1:function(assert){return assert==null?null:Bridge.as(assert[Bridge.Test.Runtime.ContextHelper.contextName],Bridge.Test.Runtime.Context)},GetContext:function(){return Bridge.Test.Runtime.ContextHelper.GetContext$1(Bridge.Test.Runtime.ContextHelper.GetAssert())},GetTestOutput:function(testId){return testId==null?null:document.getElementById(System.String.concat("qunit-test-output-",testId))},GetQUnitSource:function(output){if(output==null)return null;var source=output.getElementsByClassName("qunit-source");return source==null||source.length<=0?null:source[0]},AdjustSourceElement:function(ctx,testItem){var $t,qunitSourceName,html,assertList,els,testTitle;if(testItem==null)return null;var fc=ctx.FixtureCtx,tc=ctx.TestCtx,project=null,file=null,method=null,line=null;return(fc!=null&&(project=fc.Project,file=fc.File,method=fc.ClassName),tc!=null&&(tc.File!=null&&(file=tc.File),tc.Method!=null&&(method=System.String.concat(($t=method,$t!=null?$t:""),".",tc.Method)),line=tc.Line),project!=null||file!=null||method!=null)?(qunitSourceName=Bridge.Test.Runtime.ContextHelper.GetQUnitSource(testItem),qunitSourceName==null)?null:(html="",project!=null&&(html=System.String.concat(html,System.String.concat(" <strong>Project: <\/strong>",project))),method!=null&&(html=System.String.concat(html,System.String.concat(" at ",Bridge.Test.Runtime.ContextHelper.AdjustTags(method)))),file!=null&&(html=System.String.concat(html," in "),html=System.String.startsWith(file,"file:")?System.String.concat(html,System.String.format('<a href = "{0}" target = "_blank">{0}<\/a>',file)):System.String.concat(html,file)),line!=null&&(html=System.String.concat(html,System.String.concat(": line ",line))),assertList=null,els=testItem.getElementsByTagName("ol"),els!=null&&els.length>0&&(assertList=els[0]),testTitle=testItem.firstChild,qunitSourceName.insertAdjacentHTML("afterbegin",System.String.concat(html,"<br/>")),assertList!=null&&testTitle.addEventListener("click",function(){Bridge.Test.Runtime.ContextHelper.ToggleClass(assertList,"qunit-collapsed",[qunitSourceName])},!1),qunitSourceName):null},GetTestSource:function(output){if(output==null)return null;var source=output.getElementsByClassName("test-source");return source==null||source.length<=0?null:source[0]},GetTestSource$1:function(testId){var output=Bridge.Test.Runtime.ContextHelper.GetTestOutput(testId);return Bridge.Test.Runtime.ContextHelper.GetTestSource(output)},UpdateTestSource:function(testSource,stack){testSource!=null&&(testSource.innerHTML=System.String.concat("<th>Source: <\/th><td><pre> ",stack,"  <\/pre><\/td>"))},AdjustTags:function(s){return s==null?null:System.String.replaceAll(System.String.replaceAll(s,"<","&lt;"),">","&gt;")},HasClass:function(el,name){return System.String.indexOf(System.String.concat(" ",el.className," "),System.String.concat(" ",name," "))>=0},AddClass:function(el,name){Bridge.Test.Runtime.ContextHelper.HasClass(el,name)||(el.className=System.String.concat(el.className,System.String.concat(el.className!=null?" ":"",name)))},RemoveClass:function(el,name){for(var set=System.String.concat(" ",el.className," ");System.String.indexOf(set,System.String.concat(" ",name," "))>=0;)set=System.String.replaceAll(set,System.String.concat(" ",name," ")," ");el.className=set.trim()},ToggleClass$1:function(el,name,force){force===void 0&&(force=!1);force||!Bridge.Test.Runtime.ContextHelper.HasClass(el,name)?Bridge.Test.Runtime.ContextHelper.AddClass(el,name):Bridge.Test.Runtime.ContextHelper.RemoveClass(el,name)},ToggleClass:function(src,name,dest){var $t,has,el;if(dest===void 0&&(dest=[]),src!=null){has=Bridge.Test.Runtime.ContextHelper.HasClass(src,name);$t=Bridge.getEnumerator(dest);try{while($t.moveNext())el=$t.Current,has?Bridge.Test.Runtime.ContextHelper.AddClass(el,name):Bridge.Test.Runtime.ContextHelper.RemoveClass(el,name)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$dispose()}}},Init:function(){var ensure=$asm.$.Bridge.Test.Runtime.ContextHelper.f1;ensure("qunit-fixture");ensure("qunit")}}}});Bridge.ns("Bridge.Test.Runtime.ContextHelper",$asm.$);Bridge.apply($asm.$.Bridge.Test.Runtime.ContextHelper,{f1:function(n){var fx=document.getElementById(n);fx==null&&(fx=document.createElement("div"),fx.id=n,document.body.insertBefore(fx,document.body.firstChild))}});Bridge.define("Bridge.Test.Runtime.FixtureContext",{fields:{Project:null,ClassName:null,File:null}});Bridge.define("Bridge.Test.NUnit.Assert",{statics:{fields:{assert:null,stackOffset:0},ctors:{init:function(){this.stackOffset=2}},methods:{SetStack:function(offset){offset===void 0&&(offset=0);var ctx=Bridge.Test.Runtime.ContextHelper.GetContext$1(Bridge.Test.NUnit.Assert.assert);ctx!=null&&(ctx.Stack=QUnit.stack(Bridge.Test.NUnit.Assert.stackOffset+offset|0))},Async:function(){return Bridge.Test.NUnit.Assert.assert.async()},AreEqual:function(expected,actual,description){description===void 0&&(description=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.deepEqual(Bridge.unbox(actual),Bridge.unbox(expected),description)},AreDeepEqual:function(expected,actual,description){description===void 0&&(description=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.deepEqual(Bridge.unbox(actual),Bridge.unbox(expected),description)},AreStrictEqual:function(expected,actual,description){description===void 0&&(description=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.strictEqual(Bridge.unbox(actual),Bridge.unbox(expected),description)},AreNotEqual:function(expected,actual,description){description===void 0&&(description=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.notDeepEqual(Bridge.unbox(actual),Bridge.unbox(expected),description)},AreNotDeepEqual:function(expected,actual,description){description===void 0&&(description=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.notDeepEqual(Bridge.unbox(actual),Bridge.unbox(expected),description)},AreNotStrictEqual:function(expected,actual,description){description===void 0&&(description=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.notStrictEqual(Bridge.unbox(actual),Bridge.unbox(expected),description)},True:function(condition,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.ok(condition,message)},False:function(condition,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.notOk(condition,message)},Fail:function(message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.notOk(!0,message)},Throws$1:function(block,message){message===void 0&&(message="");Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.throws(block,message)},Throws$2:function(T,block,message,stackOffset){message===void 0&&(message="");stackOffset===void 0&&(stackOffset=0);Bridge.referenceEquals(message,"")&&stackOffset===0&&(stackOffset=1);var actual=null,expected=Bridge.Reflection.getTypeFullName(T);try{block()}catch(ex){ex=System.Exception.create(ex);actual=Bridge.Reflection.getTypeFullName(Bridge.getType(ex))}Bridge.Test.NUnit.Assert.SetStack(stackOffset);Bridge.referenceEquals(actual,expected)?Bridge.Test.NUnit.Assert.assert.ok(!0,message):Bridge.Test.NUnit.Assert.assert.equal(actual,expected,message)},Throws$3:function(block,expected,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.throws(block,Bridge.unbox(expected),message)},Throws$4:function(block,expected,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.throws(block,expected,message)},Null:function(anObject,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.ok(anObject==null,message)},NotNull:function(anObject,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.SetStack();Bridge.Test.NUnit.Assert.assert.notOk(anObject==null,message)}}}});Bridge.define("Bridge.Test.Runtime.TestContext",{fields:{File:null,Method:null,Line:null}})});QUnit.testDone(function(details){var ctx=Bridge.Test.Runtime.ContextHelper.GetContext(),testId,testItem;ctx!=null&&(ctx.TestCtx!=null||ctx.FixtureCtx!=null)&&(testId=Bridge.Test.Runtime.ContextHelper.GetTestId(details),testId!=null)&&(testItem=Bridge.Test.Runtime.ContextHelper.GetTestOutput(testId),testItem!=null&&Bridge.Test.Runtime.ContextHelper.AdjustSourceElement(ctx,testItem))});QUnit.log(function(details){var ctx=Bridge.Test.Runtime.ContextHelper.GetContext(),testId,source;ctx!=null&&ctx.Stack!=null&&(testId=Bridge.Test.Runtime.ContextHelper.GetTestId(details),source=Bridge.Test.Runtime.ContextHelper.GetTestSource$1(testId),Bridge.Test.Runtime.ContextHelper.UpdateTestSource(source,ctx.Stack))});