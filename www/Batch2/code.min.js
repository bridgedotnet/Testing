Bridge.assembly("Bridge.ClientTest.Batch2",function($asm){"use strict";Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.Bridge1385",{statics:{methods:{TestIsTypedArrayForByte:function(){var value=System.Array.init(new Uint8Array(3),System.Byte);Bridge.Test.NUnit.Assert.True(Bridge.is(value,System.Array.type(System.Byte)))}}}});Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.Bridge1499",{methods:{TestObjectStringCoalesceWorks:function(){var $t,$t1,$t2,$t3,$t4,$t5,$t6,$t7,$t8,$t9,$t10,$t11,$t12,$t13,$t14,$t15,$t16,$t17,$t18,$t19,def=Bridge.box(1,System.Int32),o1="",o2="test",o3=null;Bridge.Test.NUnit.Assert.AreStrictEqual(1,Bridge.unbox(($t=null,$t!==null?$t:def)));Bridge.Test.NUnit.Assert.AreStrictEqual("",Bridge.unbox(($t1=o1,$t1!==null?$t1:o2)));Bridge.Test.NUnit.Assert.AreStrictEqual("",Bridge.unbox(($t2=o1,$t2!==null?$t2:"test")));Bridge.Test.NUnit.Assert.AreStrictEqual("test",Bridge.unbox(($t3=o3,$t3!==null?$t3:o2)));Bridge.Test.NUnit.Assert.AreStrictEqual("test",Bridge.unbox(($t4=o3,$t4!==null?$t4:"test")));var s1="",s2="test",s3=null;Bridge.Test.NUnit.Assert.AreStrictEqual("",($t5=s1,$t5!==null?$t5:s2));Bridge.Test.NUnit.Assert.AreStrictEqual("",Bridge.unbox(($t6=s1,$t6!==null?$t6:o2)));Bridge.Test.NUnit.Assert.AreStrictEqual("",($t7=s1,$t7!==null?$t7:"test"));Bridge.Test.NUnit.Assert.AreStrictEqual("",($t8="",$t8!==null?$t8:"test"));Bridge.Test.NUnit.Assert.AreStrictEqual("test",($t9=s3,$t9!==null?$t9:s2));Bridge.Test.NUnit.Assert.AreStrictEqual("test",Bridge.unbox(($t10=s3,$t10!==null?$t10:o2)));Bridge.Test.NUnit.Assert.AreStrictEqual("test",($t11=s3,$t11!==null?$t11:"test"));Bridge.Test.NUnit.Assert.AreStrictEqual("test",($t12=null,$t12!==null?$t12:"test"));var i1=0,i2=1,i3=null;Bridge.Test.NUnit.Assert.AreStrictEqual(0,($t13=i1,$t13!==null?$t13:i2));Bridge.Test.NUnit.Assert.AreStrictEqual(0,Bridge.unbox(($t14=i1,$t14!==null?Bridge.box($t14,System.Int32,System.Nullable.toString,System.Nullable.getHashCode):o2)));Bridge.Test.NUnit.Assert.AreStrictEqual(0,($t15=i1,$t15!==null?$t15:1));Bridge.Test.NUnit.Assert.AreStrictEqual(1,($t16=i3,$t16!==null?$t16:i2));Bridge.Test.NUnit.Assert.AreStrictEqual("test",Bridge.unbox(($t17=i3,$t17!==null?Bridge.box($t17,System.Int32,System.Nullable.toString,System.Nullable.getHashCode):o2)));Bridge.Test.NUnit.Assert.AreStrictEqual(1,($t18=i3,$t18!==null?$t18:1));Bridge.Test.NUnit.Assert.AreStrictEqual(1,($t19=null,$t19!==null?$t19:i2))}}});Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.N1122",{statics:{methods:{TestClippingInJavaScriptOverflowMode:function(){var x=System.Double.max,y1=Math.floor(x/.2),y2,z1,z2;Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY,y1,"int");y2=Math.floor(x/.2);Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY,y2,"uint");z1=Math.floor(x/.2);Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY,z1,"long");z2=Math.floor(x/.2);Bridge.Test.NUnit.Assert.AreEqual(Number.POSITIVE_INFINITY,z2,"ulong")},TestIntegerDivisionInJavaScriptOverflowMode:function(){var x=1.1,y1=1/x,y2,z1,z2;Bridge.Test.NUnit.Assert.AreEqual("0.9090909090909091",y1.toString(),"int");y2=1/x;Bridge.Test.NUnit.Assert.AreEqual("0.9090909090909091",y2.toString(),"uint");z1=1/x;Bridge.Test.NUnit.Assert.AreEqual("0.9090909090909091",z1.toString(),"long");z2=1/x;Bridge.Test.NUnit.Assert.AreEqual("0.9090909090909091",z2.toString(),"ulong")}}}});Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.N1204",{statics:{methods:{TestStrictNullChecksOptionForNulls:function(){var temp={},temp1=temp,temp2={},l=System.Int64(5),ol=System.Int64(5),oi=Bridge.box(5,System.Int32),varNull=null,varUndefined=temp["this-prop-undefined"];Bridge.Test.NUnit.Assert.False(varNull===varUndefined,"varNull == varUndefined");Bridge.Test.NUnit.Assert.True(varNull===null,"varNull == null");Bridge.Test.NUnit.Assert.False(varUndefined===null,"varUndefined == null");Bridge.Test.NUnit.Assert.True(undefined===varUndefined,"Script.Undefined == varUndefined");Bridge.Test.NUnit.Assert.True(temp===temp1,"temp == temp1");Bridge.Test.NUnit.Assert.False(temp===temp2,"temp == temp2");Bridge.Test.NUnit.Assert.True(l.equals(System.Int64(5)),"l == 5");Bridge.Test.NUnit.Assert.False(ol===oi,"ol == oi");Bridge.Test.NUnit.Assert.False(varUndefined===varNull,"varUndefined == varNull");Bridge.Test.NUnit.Assert.True(null===varNull,"null == varNull");Bridge.Test.NUnit.Assert.False(null===varUndefined,"null == varUndefined");Bridge.Test.NUnit.Assert.True(varUndefined===undefined,"varUndefined == Script.Undefined");Bridge.Test.NUnit.Assert.True(temp1===temp,"temp1 == temp");Bridge.Test.NUnit.Assert.False(temp2===temp,"temp2 == temp");Bridge.Test.NUnit.Assert.True(System.Int64(5).equals(l),"5 == l");Bridge.Test.NUnit.Assert.False(oi===ol,"oi == ol")}}}});Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.N772",{statics:{methods:{TestUseCase:function(){var byteArray=System.Array.init(new Uint8Array(1),System.Byte),sbyteArray=System.Array.init(new Int8Array(2),System.SByte),shortArray=System.Array.init(new Int16Array(3),System.Int16),ushortArray=System.Array.init(new Uint16Array(4),System.UInt16),intArray=System.Array.init(new Int32Array(5),System.Int32),uintArray=System.Array.init(new Uint32Array(6),System.UInt32),floatArray=System.Array.init(new Float32Array(7),System.Single),doubleArray=System.Array.init(new Float64Array(8),System.Double),stringArray=System.Array.init(9,null,System.String),decimalArray=System.Array.init(10,System.Decimal(0),System.Decimal);byteArray[System.Array.index(0,byteArray)]=1;sbyteArray[System.Array.index(0,sbyteArray)]=2;shortArray[System.Array.index(0,shortArray)]=3;ushortArray[System.Array.index(0,ushortArray)]=4;intArray[System.Array.index(0,intArray)]=5;uintArray[System.Array.index(0,uintArray)]=6;floatArray[System.Array.index(0,floatArray)]=7;doubleArray[System.Array.index(0,doubleArray)]=8;stringArray[System.Array.index(0,stringArray)]="9";decimalArray[System.Array.index(0,decimalArray)]=System.Decimal(10);Bridge.Test.NUnit.Assert.AreEqual(1,byteArray[System.Array.index(0,byteArray)],"get byteArray[0]");Bridge.Test.NUnit.Assert.AreEqual(2,sbyteArray[System.Array.index(0,sbyteArray)],"get sbyteArray[0]");Bridge.Test.NUnit.Assert.AreEqual(3,shortArray[System.Array.index(0,shortArray)],"get shortArray[0]");Bridge.Test.NUnit.Assert.AreEqual(4,ushortArray[System.Array.index(0,ushortArray)],"get ushortArray[0]");Bridge.Test.NUnit.Assert.AreEqual(5,intArray[System.Array.index(0,intArray)],"get intArray[0]");Bridge.Test.NUnit.Assert.AreEqual(6,uintArray[System.Array.index(0,uintArray)],"get uintArray[0]");Bridge.Test.NUnit.Assert.AreEqual(7,floatArray[System.Array.index(0,floatArray)],"get floatArray[0]");Bridge.Test.NUnit.Assert.AreEqual(8,doubleArray[System.Array.index(0,doubleArray)],"get doubleArray[0]");Bridge.Test.NUnit.Assert.AreEqual("9",stringArray[System.Array.index(0,stringArray)],"get stringArray[0]");Bridge.Test.NUnit.Assert.AreEqual(System.Decimal(10),decimalArray[System.Array.index(0,decimalArray)],"get decimalArray[0]")}}},methods:{TypePropertiesAreCorrect:function(){var arr=System.Array.init([1,2,3],System.Int32);Bridge.Test.NUnit.Assert.True(Bridge.is(arr,Array),"is Array should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.Array.type(System.Int32)),"is int[] should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.Collections.ICollection),"is ICollection should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.Collections.IEnumerable),"is IEnumerable should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.ICloneable),"is ICloneable should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.Collections.Generic.ICollection$1(System.Int32)),"is ICollection<int> should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.Collections.Generic.IEnumerable$1(System.Int32)),"is IEnumerable<int> should be true");Bridge.Test.NUnit.Assert.True(Bridge.is(arr,System.Collections.Generic.IList$1(System.Int32)),"is IList<int> should be true")},LengthWorks:function(){Bridge.Test.NUnit.Assert.AreEqual(0,System.Array.init(new Int32Array(0),System.Int32).length);Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.init(["x"],System.String).length);Bridge.Test.NUnit.Assert.AreEqual(2,System.Array.init(["x","y"],System.String).length)},RankIsOne:function(){Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.getRank(System.Array.init(new Int32Array(0),System.Int32)))},GetLengthWorks:function(){Bridge.Test.NUnit.Assert.AreEqual(0,System.Array.getLength(System.Array.init(new Int32Array(0),System.Int32),0));Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.getLength(System.Array.init(["x"],System.String),0));Bridge.Test.NUnit.Assert.AreEqual(2,System.Array.getLength(System.Array.init(["x","y"],System.String),0))},GetLowerBound:function(){Bridge.Test.NUnit.Assert.AreEqual(0,System.Array.getLower(System.Array.init(new Int32Array(0),System.Int32),0));Bridge.Test.NUnit.Assert.AreEqual(0,System.Array.getLower(System.Array.init(["x"],System.String),0));Bridge.Test.NUnit.Assert.AreEqual(0,System.Array.getLower(System.Array.init(["x","y"],System.String),0))},GetUpperBoundWorks:function(){Bridge.Test.NUnit.Assert.AreEqual(-1,System.Array.getLength(System.Array.init(new Int32Array(0),System.Int32),0)-1);Bridge.Test.NUnit.Assert.AreEqual(0,System.Array.getLength(System.Array.init(["x"],System.String),0)-1);Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.getLength(System.Array.init(["x","y"],System.String),0)-1)},GettingValueByIndexWorks:function(){var $t,$t1;Bridge.Test.NUnit.Assert.AreEqual("x",($t=System.Array.init(["x","y"],System.String))[System.Array.index(0,$t)]);Bridge.Test.NUnit.Assert.AreEqual("y",($t1=System.Array.init(["x","y"],System.String))[System.Array.index(1,$t1)])},GetValueWorks:function(){Bridge.Test.NUnit.Assert.AreEqual("x",Bridge.unbox(System.Array.get(System.Array.init(["x","y"],System.String),0)));Bridge.Test.NUnit.Assert.AreEqual("y",Bridge.unbox(System.Array.get(System.Array.init(["x","y"],System.String),1)))},SettingValueByIndexWorks:function(){var arr=System.Array.init(2,null,System.String);arr[System.Array.index(0,arr)]="x";arr[System.Array.index(1,arr)]="y";Bridge.Test.NUnit.Assert.AreEqual("x",arr[System.Array.index(0,arr)]);Bridge.Test.NUnit.Assert.AreEqual("y",arr[System.Array.index(1,arr)])},SetValueWorks:function(){var arr=System.Array.init(2,null,System.String);System.Array.set(arr,"x",0);System.Array.set(arr,"y",1);Bridge.Test.NUnit.Assert.AreEqual("x",arr[System.Array.index(0,arr)]);Bridge.Test.NUnit.Assert.AreEqual("y",arr[System.Array.index(1,arr)])},ForeachWorks:function(){var $t,result="",s;$t=Bridge.getEnumerator(System.Array.init(["x","y"],System.String));try{while($t.moveNext())s=$t.Current,result=System.String.concat(result,s)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$dispose()}Bridge.Test.NUnit.Assert.AreEqual("xy",result)},CloneWorks:function(){var arr=System.Array.init(["x","y"],System.String),arr2=System.Array.clone(arr);Bridge.Test.NUnit.Assert.False(arr===arr2);Bridge.Test.NUnit.Assert.AreEqual(Bridge.unbox(arr2),arr)},ConcatWorks:function(){var arr=System.Array.init(["a","b"],System.String);Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["a","b","c"],System.String),arr.concat("c"));Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["a","b","c","d"],System.String),arr.concat("c","d"));Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["a","b"],System.String),arr)},ContainsWorks:function(){var arr=System.Array.init(["x","y"],System.String);Bridge.Test.NUnit.Assert.True(System.Array.contains(arr,"x",System.String));Bridge.Test.NUnit.Assert.False(System.Array.contains(arr,"z",System.String))},ContainsUsesEqualsMethod:function(){var arr=System.Array.init([new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(1),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(3)],Bridge.ClientTest.Batch2.BridgeIssues.N772.C);Bridge.Test.NUnit.Assert.True(System.Array.contains(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2),Bridge.ClientTest.Batch2.BridgeIssues.N772.C));Bridge.Test.NUnit.Assert.False(System.Array.contains(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(4),Bridge.ClientTest.Batch2.BridgeIssues.N772.C))},AllWithArrayItemFilterCallbackWorks:function(){Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(System.Array.init([1,2,3],System.Int32)).all($asm.$.Bridge.ClientTest.Batch2.BridgeIssues.N772.f1));Bridge.Test.NUnit.Assert.False(System.Linq.Enumerable.from(System.Array.init([1,2,3],System.Int32)).all($asm.$.Bridge.ClientTest.Batch2.BridgeIssues.N772.f2))},SliceWithoutEndWorks:function(){Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["c","d"],System.String),System.Array.init(["a","b","c","d"],System.String).slice(2));Bridge.Test.NUnit.Assert.AreDeepEqual(System.Array.init(["b","c"],System.String),System.Array.init(["a","b","c","d"],System.String).slice(1,3))},ForeachWithArrayItemCallbackWorks:function(){var result="";System.Array.init(["a","b","c"],System.String).forEach(function(s){result=System.String.concat(result,s)});Bridge.Test.NUnit.Assert.AreEqual("abc",result)},IndexOfWithoutStartIndexWorks:function(){Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.init(["a","b","c","b"],System.String).indexOf("b"))},IndexOfWithoutStartIndexUsesEqualsMethod:function(){var arr=System.Array.init([new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(1),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(3)],Bridge.ClientTest.Batch2.BridgeIssues.N772.C);Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.indexOfT(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2)));Bridge.Test.NUnit.Assert.AreEqual(-1,System.Array.indexOfT(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(4)))},IndexOfWithStartIndexWorks:function(){Bridge.Test.NUnit.Assert.AreEqual(3,System.Array.init(["a","b","c","b"],System.String).indexOf("b",2))},JoinWithoutDelimiterWorks:function(){Bridge.Test.NUnit.Assert.AreEqual("a,b,c,b",System.Array.init(["a","b","c","b"],System.String).join(","));Bridge.Test.NUnit.Assert.AreEqual("a|b|c|b",System.Array.init(["a","b","c","b"],System.String).join("|"))},ReverseWorks:function(){var arr=System.Array.init([1,3,4,1,3,2],System.Int32);arr.reverse();Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([2,3,1,4,3,1],System.Int32),arr)},AnyWithArrayItemFilterCallbackWorks:function(){Bridge.Test.NUnit.Assert.True(System.Linq.Enumerable.from(System.Array.init([1,2,3,4],System.Int32)).any($asm.$.Bridge.ClientTest.Batch2.BridgeIssues.N772.f3));Bridge.Test.NUnit.Assert.False(System.Linq.Enumerable.from(System.Array.init([1,2,3,4],System.Int32)).any($asm.$.Bridge.ClientTest.Batch2.BridgeIssues.N772.f4))},BinarySearch1Works:function(){var arr=System.Array.init([1,2,3,3,4,5],System.Int32);Bridge.Test.NUnit.Assert.AreEqual(2,System.Array.binarySearch(arr,0,arr.length,3));Bridge.Test.NUnit.Assert.True(System.Array.binarySearch(arr,0,arr.length,6)<0)},BinarySearch2Works:function(){var arr=System.Array.init([1,2,3,3,4,5],System.Int32);Bridge.Test.NUnit.Assert.AreEqual(3,System.Array.binarySearch(arr,3,2,3));Bridge.Test.NUnit.Assert.True(System.Array.binarySearch(arr,2,2,4)<0)},BinarySearch3Works:function(){var arr=System.Array.init([1,2,3,3,4,5],System.Int32);Bridge.Test.NUnit.Assert.AreEqual(2,System.Array.binarySearch(arr,0,arr.length,3,new Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer));Bridge.Test.NUnit.Assert.AreEqual(-1,System.Array.binarySearch(arr,0,arr.length,6,new Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer))},BinarySearch4Works:function(){var arr=System.Array.init([1,2,3,3,4,5],System.Int32);Bridge.Test.NUnit.Assert.AreEqual(3,System.Array.binarySearch(arr,3,2,3,new Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer));Bridge.Test.NUnit.Assert.True(System.Array.binarySearch(arr,3,2,4,new Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer)<0)},BinarySearchExceptionsWorks:function(){var arr1=null,arr2=System.Array.init([1,2,3,3,4,5],System.Int32);Bridge.Test.NUnit.Assert.Throws$1(function(){System.Array.binarySearch(arr1,0,arr1.length,1)});Bridge.Test.NUnit.Assert.Throws$1(function(){System.Array.binarySearch(arr2,-1,1,1)});Bridge.Test.NUnit.Assert.Throws$1(function(){System.Array.binarySearch(arr2,1,6,1)})},SortWithDefaultCompareWorks:function(){var arr=System.Array.init([1,6,6,4,2],System.Int32);arr.sort();Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([1,2,4,6,6],System.Int32),arr)},Sort1Works:function(){var arr=System.Array.init([1,6,6,4,2],System.Int32);System.Array.sort(arr);Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([1,2,4,6,6],System.Int32),arr)},Sort2Works:function(){var arr=System.Array.init([1,6,6,4,2],System.Int32);System.Array.sort(arr,2,3);Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([1,6,2,4,6],System.Int32),arr)},Sort3Works:function(){var arr=System.Array.init([1,2,6,3,6,7],System.Int32);System.Array.sort(arr,2,3,new Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer);Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([1,2,6,6,3,7],System.Int32),arr)},Sort4Works:function(){var arr=System.Array.init([1,6,6,4,2],System.Int32);System.Array.sort(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer);Bridge.Test.NUnit.Assert.AreEqual(System.Array.init([6,6,4,2,1],System.Int32),arr)},SortExceptionsWorks:function(){var arr1=null;Bridge.Test.NUnit.Assert.Throws$1(function(){System.Array.sort(arr1)})},ForeachWhenCastToIListWorks:function(){var $t,list=System.Array.init(["x","y"],System.String),result="",s;$t=Bridge.getEnumerator(list,System.String);try{while($t.moveNext())s=$t.Current,result=System.String.concat(result,s)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$dispose()}Bridge.Test.NUnit.Assert.AreEqual("xy",result)},ICollectionCountWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.AreEqual(3,System.Array.getCount(l,System.String))},ICollectionAddWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException,function(){System.Array.add(l,"a",System.String)})},ICollectionClearWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException,function(){System.Array.clear(l,System.String)})},ICollectionContainsWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.True(System.Array.contains(l,"y",System.String));Bridge.Test.NUnit.Assert.False(System.Array.contains(l,"a",System.String))},ICollectionContainsUsesEqualsMethod:function(){var l=System.Array.init([new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(1),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(3)],Bridge.ClientTest.Batch2.BridgeIssues.N772.C);Bridge.Test.NUnit.Assert.True(System.Array.contains(l,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2),Bridge.ClientTest.Batch2.BridgeIssues.N772.C));Bridge.Test.NUnit.Assert.False(System.Array.contains(l,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(4),Bridge.ClientTest.Batch2.BridgeIssues.N772.C))},ICollectionRemoveWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException,function(){System.Array.remove(l,"y",System.String)})},IListIndexingWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.AreEqual("y",System.Array.getItem(l,1,System.String));System.Array.setItem(l,1,"a",System.String);Bridge.Test.NUnit.Assert.AreEqual(System.Array.init(["x","a","z"],System.String),System.Linq.Enumerable.from(l).toArray())},IListIndexOfWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.indexOf(l,"y",0,null,System.String));Bridge.Test.NUnit.Assert.AreEqual(-1,System.Array.indexOf(l,"a",0,null,System.String))},IListIndexOfUsesEqualsMethod:function(){var arr=System.Array.init([new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(1),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2),new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(3)],Bridge.ClientTest.Batch2.BridgeIssues.N772.C);Bridge.Test.NUnit.Assert.AreEqual(1,System.Array.indexOfT(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(2)));Bridge.Test.NUnit.Assert.AreEqual(-1,System.Array.indexOfT(arr,new Bridge.ClientTest.Batch2.BridgeIssues.N772.C(4)))},IListInsertWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException,function(){System.Array.insert(l,1,"a",System.String)})},IListRemoveAtWorks:function(){var l=System.Array.init(["x","y","z"],System.String);Bridge.Test.NUnit.Assert.Throws$2(System.NotSupportedException,function(){System.Array.removeAt(l,1,System.String)})}}});Bridge.ns("Bridge.ClientTest.Batch2.BridgeIssues.N772",$asm.$);Bridge.apply($asm.$.Bridge.ClientTest.Batch2.BridgeIssues.N772,{f1:function(x){return x>0},f2:function(x){return x>1},f3:function(i){return i>1},f4:function(i){return i>5}});Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.N772.C",{fields:{i:0},ctors:{ctor:function(i){this.$initialize();this.i=i}},methods:{equals:function(o){return Bridge.is(o,Bridge.ClientTest.Batch2.BridgeIssues.N772.C)&&this.i===Bridge.cast(o,Bridge.ClientTest.Batch2.BridgeIssues.N772.C).i},getHashCode:function(){return this.i}}});Bridge.define("Bridge.ClientTest.Batch2.BridgeIssues.N772.TestReverseComparer",{inherits:[System.Collections.Generic.IComparer$1(System.Int32)],alias:["compare",["System$Collections$Generic$IComparer$1$System$Int32$compare","System$Collections$Generic$IComparer$1$compare"]],methods:{compare:function(x,y){return x===y?0:x>y?-1:1}}});Bridge.define("Bridge.ClientTest.Batch2.CheckedUncheckedTests",{statics:{methods:{AssertEqual:function(expected,actual,message){message===void 0&&(message=null);Bridge.Test.NUnit.Assert.AreEqual(expected.toString(),actual.toString(),message)},Bypass:function(o){return o}}}});Bridge.define("Bridge.ClientTest.Batch2.CheckedUncheckedTests.CheckedInsideUncheckedTests",{statics:{methods:{TestInt32:function(){var max=2147483647,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(max+1,System.Int32)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(max2,max2=Bridge.Int.check(max2+1,System.Int32))},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max3=Bridge.Int.check(max3+1,System.Int32)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.mul(2,max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(max+1,System.Int32),System.Int32))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=Bridge.Int.check(max3+1,System.Int32)),System.Int32))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=Bridge.Int.check(max4+1,System.Int32),System.Int32))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.mul(2,max,1),System.Int32))},"Through parameter *");var min=-2147483648,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(min-1,System.Int32)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(min1,min1=Bridge.Int.check(min1-1,System.Int32))},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=Bridge.Int.check(min2-1,System.Int32)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(-min,System.Int32)},"Through identifier unary -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(min-1,System.Int32),System.Int32))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=Bridge.Int.check(min3-1,System.Int32)),System.Int32))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=Bridge.Int.check(min4-1,System.Int32),System.Int32))},"Through parameter --pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(-min,System.Int32),System.Int32))},"Through parameter unary -")},TestUInt32:function(){var max=4294967295,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(max+1,System.UInt32)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(max1,max1=Bridge.Int.check(max1+1,System.UInt32))},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max2=Bridge.Int.check(max2+1,System.UInt32)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.umul(2,max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(max+1,System.UInt32),System.UInt32))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=Bridge.Int.check(max3+1,System.UInt32)),System.UInt32))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=Bridge.Int.check(max4+1,System.UInt32),System.UInt32))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.umul(2,max,1),System.UInt32))},"Through parameter *");var min=0,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(min-1,System.UInt32)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(min1,min1=Bridge.Int.check(min1-1,System.UInt32))},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=Bridge.Int.check(min2-1,System.UInt32)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(min-1,System.UInt32),System.UInt32))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=Bridge.Int.check(min3-1,System.UInt32)),System.UInt32))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=Bridge.Int.check(min4-1,System.UInt32),System.UInt32))},"Through parameter --pre")},TestLong:function(){var max=System.Int64.MaxValue,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max.add(System.Int64(1),1)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=max1,max1=max1.inc(1),$t)},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max2=max2.inc(1)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=System.Int64(2).mul(max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.Int64(1),1))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(1),$t))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc(1))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(2).mul(max,1))},"Through parameter *");var min=System.Int64.MinValue,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min.sub(System.Int64(1),1)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=min1,min1=min1.dec(1),$t)},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=min2.dec(1)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min.neg(1)},"Through identifier unary -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.Int64(1),1))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(1),$t))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec(1))},"Through parameter --pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.neg(1))},"Through parameter unary -")},TestULong:function(){var max=System.UInt64.MaxValue,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max.add(System.UInt64(1),1)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=max1,max1=max1.inc(1),$t)},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max2=max2.inc(1)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=System.UInt64(2).mul(max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.UInt64(1),1))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(1),$t))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc(1))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.UInt64(2).mul(max,1))},"Through parameter *");var min=System.UInt64.MinValue,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min.sub(System.UInt64(1),1)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=min1,min1=min1.dec(1),$t)},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=min2.dec(1)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.UInt64(1),1))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(1),$t))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec(1))},"Through parameter --pre")}}}});Bridge.define("Bridge.ClientTest.Batch2.CheckedUncheckedTests.CheckedTests",{statics:{methods:{TestInt32:function(){var max=2147483647,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(max+1,System.Int32)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(max2,max2=Bridge.Int.check(max2+1,System.Int32))},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max3=Bridge.Int.check(max3+1,System.Int32)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.mul(2,max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(max+1,System.Int32),System.Int32))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=Bridge.Int.check(max3+1,System.Int32)),System.Int32))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=Bridge.Int.check(max4+1,System.Int32),System.Int32))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.mul(2,max,1),System.Int32))},"Through parameter *");var min=-2147483648,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(min-1,System.Int32)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(min1,min1=Bridge.Int.check(min1-1,System.Int32))},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=Bridge.Int.check(min2-1,System.Int32)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(-min,System.Int32)},"Through identifier unary -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(min-1,System.Int32),System.Int32))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=Bridge.Int.check(min3-1,System.Int32)),System.Int32))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=Bridge.Int.check(min4-1,System.Int32),System.Int32))},"Through parameter --pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(-min,System.Int32),System.Int32))},"Through parameter unary -")},TestUInt32:function(){var max=4294967295,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(max+1,System.UInt32)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(max1,max1=Bridge.Int.check(max1+1,System.UInt32))},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max2=Bridge.Int.check(max2+1,System.UInt32)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.umul(2,max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(max+1,System.UInt32),System.UInt32))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=Bridge.Int.check(max3+1,System.UInt32)),System.UInt32))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=Bridge.Int.check(max4+1,System.UInt32),System.UInt32))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.umul(2,max,1),System.UInt32))},"Through parameter *");var min=0,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.Int.check(min-1,System.UInt32)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=Bridge.identity(min1,min1=Bridge.Int.check(min1-1,System.UInt32))},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=Bridge.Int.check(min2-1,System.UInt32)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.check(min-1,System.UInt32),System.UInt32))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=Bridge.Int.check(min3-1,System.UInt32)),System.UInt32))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=Bridge.Int.check(min4-1,System.UInt32),System.UInt32))},"Through parameter --pre")},TestLong:function(){var max=System.Int64.MaxValue,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max.add(System.Int64(1),1)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=max1,max1=max1.inc(1),$t)},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max2=max2.inc(1)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=System.Int64(2).mul(max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.Int64(1),1))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(1),$t))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc(1))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(2).mul(max,1))},"Through parameter *");var min=System.Int64.MinValue,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min.sub(System.Int64(1),1)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=min1,min1=min1.dec(1),$t)},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=min2.dec(1)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min.neg(1)},"Through identifier unary -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.Int64(1),1))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(1),$t))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec(1))},"Through parameter --pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.neg(1))},"Through parameter unary -")},TestULong:function(){var max=System.UInt64.MaxValue,max1=max,max2=max,max3=max,max4=max;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max.add(System.UInt64(1),1)},"Through identifier +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=max1,max1=max1.inc(1),$t)},"Through identifier post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=max2=max2.inc(1)},"Through identifier ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=System.UInt64(2).mul(max,1)},"Through identifier *");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.UInt64(1),1))},"Through parameter +");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(1),$t))},"Through parameter post++");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc(1))},"Through parameter ++pre");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.UInt64(2).mul(max,1))},"Through parameter *");var min=System.UInt64.MinValue,min1=min,min2=min,min3=min,min4=min;Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min.sub(System.UInt64(1),1)},"Through identifier -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t,r=($t=min1,min1=min1.dec(1),$t)},"Through identifier post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var r=min2=min2.dec(1)},"Through identifier pre--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.UInt64(1),1))},"Through parameter -");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){var $t;Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(1),$t))},"Through parameter post--");Bridge.Test.NUnit.Assert.Throws$2(System.OverflowException,function(){Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec(1))},"Through parameter --pre")}}}});Bridge.define("Bridge.ClientTest.Batch2.CheckedUncheckedTests.UncheckedInsideCheckedTests",{statics:{methods:{TestInt32:function(){var max=2147483647,max1=max,max2=max,max3=max,max4=max,rMax1=max+1|0,rMax2=Bridge.identity(max1,max1=max1+1|0),rMax3=max2=max2+1|0,rMax4=Bridge.Int.mul(2,max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMax1,System.Int32),"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMax2,System.Int32),"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMax3,System.Int32),"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.box(rMax4,System.Int32),"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max+1|0,System.Int32)),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=max3+1|0),System.Int32)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=max4+1|0,System.Int32)),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.mul(2,max),System.Int32)),"Through parameter *");var min=-2147483648,min1=min,min2=min,min3=min,min4=min,rMin1=min-1|0,rMin2=Bridge.identity(min1,min1=min1-1|0),rMin3=min2=min2-1|0,rMin4=-min|0;Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMin1,System.Int32),"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMin2,System.Int32),"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMin3,System.Int32),"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMin4,System.Int32),"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min-1|0,System.Int32)),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=min3-1|0),System.Int32)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=min4-1|0,System.Int32)),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(-min|0,System.Int32)),"Through parameter unary -")},TestUInt32:function(){var max=4294967295,max1=max,max2=max,max3=max,max4=max,rMax1=max+1>>>0,rMax2=Bridge.identity(max1,max1=max1+1>>>0),rMax3=max2=max2+1>>>0,rMax4=Bridge.Int.umul(2,max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMax1,System.UInt32),"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMax2,System.UInt32),"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMax3,System.UInt32),"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967294",Bridge.box(rMax4,System.UInt32),"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max+1>>>0,System.UInt32)),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=max3+1>>>0),System.UInt32)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=max4+1>>>0,System.UInt32)),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967294",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.umul(2,max),System.UInt32)),"Through parameter *");var min=0,min1=min,min2=min,min3=min,min4=min,rMin1=min-1>>>0,rMin2=Bridge.identity(min1,min1=min1-1>>>0),rMin3=min2=min2-1>>>0,rMin4=System.Int64(min).neg();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMin1,System.UInt32),"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMin2,System.UInt32),"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMin3,System.UInt32),"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMin4,"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min-1>>>0,System.UInt32)),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=min3-1>>>0),System.UInt32)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=min4-1>>>0,System.UInt32)),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(min).neg()),"Through parameter unary -")},TestLong:function(){var $t,max=System.Int64.MaxValue,max1=max,max2=max,max3=max,max4=max,rMax1=max.add(System.Int64(1)),rMax2=($t=max1,max1=max1.inc(),$t),rMax3=max2=max2.inc(),rMax4=System.Int64(2).mul(max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMax1,"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMax2,"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMax3,"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",rMax4,"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.Int64(1))),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(),$t)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc()),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(2).mul(max)),"Through parameter *");var min=System.Int64.MinValue,min1=min,min2=min,min3=min,min4=min,rMin1=min.sub(System.Int64(1)),rMin2=($t=min1,min1=min1.dec(),$t),rMin3=min2=min2.dec(),rMin4=min.neg();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMin1,"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMin2,"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMin3,"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMin4,"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.Int64(1))),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(),$t)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec()),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.neg()),"Through parameter unary -")},TestULong:function(){var $t,max=System.UInt64.MaxValue,max1=max,max2=max,max3=max,max4=max,rMax1=max.add(System.UInt64(1)),rMax2=($t=max1,max1=max1.inc(),$t),rMax3=max2=max2.inc(),rMax4=System.UInt64(2).mul(max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMax1,"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMax2,"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMax3,"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551614",rMax4,"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.UInt64(1))),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(),$t)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc()),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551614",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.UInt64(2).mul(max)),"Through parameter *");var min=System.UInt64.MinValue,min1=min,min2=min,min3=min,min4=min,rMin1=min.sub(System.UInt64(1)),rMin2=($t=min1,min1=min1.dec(),$t),rMin3=min2=min2.dec();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMin1,"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMin2,"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMin3,"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.UInt64(1))),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(),$t)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec()),"Through parameter --pre")}}}});Bridge.define("Bridge.ClientTest.Batch2.CheckedUncheckedTests.UncheckedTests",{statics:{methods:{TestInt32:function(){var max=2147483647,max1=max,max2=max,max3=max,max4=max,rMax1=max+1|0,rMax2=Bridge.identity(max1,max1=max1+1|0),rMax3=max2=max2+1|0,rMax4=Bridge.Int.mul(2,max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMax1,System.Int32),"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMax2,System.Int32),"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMax3,System.Int32),"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.box(rMax4,System.Int32),"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max+1|0,System.Int32)),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=max3+1|0),System.Int32)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=max4+1|0,System.Int32)),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.mul(2,max),System.Int32)),"Through parameter *");var min=-2147483648,min1=min,min2=min,min3=min,min4=min,rMin1=min-1|0,rMin2=Bridge.identity(min1,min1=min1-1|0),rMin3=min2=min2-1|0,rMin4=-min|0;Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMin1,System.Int32),"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMin2,System.Int32),"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMin3,System.Int32),"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMin4,System.Int32),"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min-1|0,System.Int32)),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=min3-1|0),System.Int32)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=min4-1|0,System.Int32)),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(-min|0,System.Int32)),"Through parameter unary -")},TestUInt32:function(){var max=4294967295,max1=max,max2=max,max3=max,max4=max,rMax1=max+1>>>0,rMax2=Bridge.identity(max1,max1=max1+1>>>0),rMax3=max2=max2+1>>>0,rMax4=Bridge.Int.umul(2,max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMax1,System.UInt32),"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMax2,System.UInt32),"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMax3,System.UInt32),"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967294",Bridge.box(rMax4,System.UInt32),"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max+1>>>0,System.UInt32)),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=max3+1>>>0),System.UInt32)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=max4+1>>>0,System.UInt32)),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967294",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.Int.umul(2,max),System.UInt32)),"Through parameter *");var min=0,min1=min,min2=min,min3=min,min4=min,rMin1=min-1>>>0,rMin2=Bridge.identity(min1,min1=min1-1>>>0),rMin3=min2=min2-1>>>0,rMin4=System.Int64(min).neg();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMin1,System.UInt32),"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMin2,System.UInt32),"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMin3,System.UInt32),"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMin4,"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min-1>>>0,System.UInt32)),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=min3-1>>>0),System.UInt32)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=min4-1>>>0,System.UInt32)),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(min).neg()),"Through parameter unary -")},TestLong:function(){var $t,max=System.Int64.MaxValue,max1=max,max2=max,max3=max,max4=max,rMax1=max.add(System.Int64(1)),rMax2=($t=max1,max1=max1.inc(),$t),rMax3=max2=max2.inc(),rMax4=System.Int64(2).mul(max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMax1,"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMax2,"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMax3,"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",rMax4,"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.Int64(1))),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(),$t)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc()),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(2).mul(max)),"Through parameter *");var min=System.Int64.MinValue,min1=min,min2=min,min3=min,min4=min,rMin1=min.sub(System.Int64(1)),rMin2=($t=min1,min1=min1.dec(),$t),rMin3=min2=min2.dec(),rMin4=min.neg();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMin1,"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMin2,"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMin3,"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMin4,"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.Int64(1))),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(),$t)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec()),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.neg()),"Through parameter unary -")},TestULong:function(){var $t,max=System.UInt64.MaxValue,max1=max,max2=max,max3=max,max4=max,rMax1=max.add(System.UInt64(1)),rMax2=($t=max1,max1=max1.inc(),$t),rMax3=max2=max2.inc(),rMax4=System.UInt64(2).mul(max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMax1,"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMax2,"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMax3,"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551614",rMax4,"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.UInt64(1))),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(),$t)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc()),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551614",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.UInt64(2).mul(max)),"Through parameter *");var min=System.UInt64.MinValue,min1=min,min2=min,min3=min,min4=min,rMin1=min.sub(System.UInt64(1)),rMin2=($t=min1,min1=min1.dec(),$t),rMin3=min2=min2.dec();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMin1,"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMin2,"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMin3,"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.UInt64(1))),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(),$t)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec()),"Through parameter --pre")}}}});Bridge.define("Bridge.ClientTest.Batch2.CheckedUncheckedTests.WithNoUncheckedKeywordTests",{statics:{methods:{TestInt32:function(){var max=2147483647,max1=max,max2=max,max3=max,max4=max,rMax1=max+1,rMax2=Bridge.identity(max1,max1=max1+1),rMax3=max2=max2+1,rMax4=2*max;Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483648",Bridge.box(rMax1,System.Int32),"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.box(rMax2,System.Int32),"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483648",Bridge.box(rMax3,System.Int32),"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967294",Bridge.box(rMax4,System.Int32),"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max+1,System.Int32)),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483647",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=max3+1),System.Int32)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=max4+1,System.Int32)),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967294",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(2*max,System.Int32)),"Through parameter *");var min=-2147483648,min1=min,min2=min,min3=min,min4=min,rMin1=min-1,rMin2=Bridge.identity(min1,min1=min1-1),rMin3=min2=min2-1,rMin4=-min;Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483649",Bridge.box(rMin1,System.Int32),"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.box(rMin2,System.Int32),"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483649",Bridge.box(rMin3,System.Int32),"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483648",Bridge.box(rMin4,System.Int32),"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483649",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min-1,System.Int32)),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=min3-1),System.Int32)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2147483649",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=min4-1,System.Int32)),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("2147483648",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(-min,System.Int32)),"Through parameter unary -")},TestUInt32:function(){var max=4294967295,max1=max,max2=max,max3=max,max4=max,rMax1=max+1,rMax2=Bridge.identity(max1,max1=max1+1),rMax3=max2=max2+1,rMax4=2*max;Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967296",Bridge.box(rMax1,System.UInt32),"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.box(rMax2,System.UInt32),"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967296",Bridge.box(rMax3,System.UInt32),"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("8589934590",Bridge.box(rMax4,System.UInt32),"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967296",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max+1,System.UInt32)),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967295",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(max3,max3=max3+1),System.UInt32)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("4294967296",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(max4=max4+1,System.UInt32)),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("8589934590",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(2*max,System.UInt32)),"Through parameter *");var min=0,min1=min,min2=min,min3=min,min4=min,rMin1=min-1,rMin2=Bridge.identity(min1,min1=min1-1),rMin3=min2=min2-1,rMin4=System.Int64(min).neg();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-1",Bridge.box(rMin1,System.UInt32),"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.box(rMin2,System.UInt32),"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-1",Bridge.box(rMin3,System.UInt32),"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMin4,"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-1",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min-1,System.UInt32)),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(Bridge.identity(min3,min3=min3-1),System.UInt32)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-1",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(Bridge.box(min4=min4-1,System.UInt32)),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(min).neg()),"Through parameter unary -")},TestLong:function(){var $t,max=System.Int64.MaxValue,max1=max,max2=max,max3=max,max4=max,rMax1=max.add(System.Int64(1)),rMax2=($t=max1,max1=max1.inc(),$t),rMax3=max2=max2.inc(),rMax4=System.Int64(2).mul(max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMax1,"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMax2,"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMax3,"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",rMax4,"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.Int64(1))),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(),$t)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc()),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-2",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.Int64(2).mul(max)),"Through parameter *");var min=System.Int64.MinValue,min1=min,min2=min,min3=min,min4=min,rMin1=min.sub(System.Int64(1)),rMin2=($t=min1,min1=min1.dec(),$t),rMin3=min2=min2.dec(),rMin4=min.neg();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMin1,"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMin2,"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",rMin3,"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",rMin4,"Through identifier unary -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.Int64(1))),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(),$t)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("9223372036854775807",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec()),"Through parameter --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("-9223372036854775808",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.neg()),"Through parameter unary -")},TestULong:function(){var $t,max=System.UInt64.MaxValue,max1=max,max2=max,max3=max,max4=max,rMax1=max.add(System.UInt64(1)),rMax2=($t=max1,max1=max1.inc(),$t),rMax3=max2=max2.inc(),rMax4=System.UInt64(2).mul(max);Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMax1,"Through identifier +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMax2,"Through identifier post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMax3,"Through identifier ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551614",rMax4,"Through identifier *");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max.add(System.UInt64(1))),"Through parameter +");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=max3,max3=max3.inc(),$t)),"Through parameter post++");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(max4=max4.inc()),"Through parameter ++pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551614",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(System.UInt64(2).mul(max)),"Through parameter *");var min=System.UInt64.MinValue,min1=min,min2=min,min3=min,min4=min,rMin1=min.sub(System.UInt64(1)),rMin2=($t=min1,min1=min1.dec(),$t),rMin3=min2=min2.dec();Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMin1,"Through identifier -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",rMin2,"Through identifier post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",rMin3,"Through identifier --pre");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min.sub(System.UInt64(1))),"Through parameter -");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("0",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(($t=min3,min3=min3.dec(),$t)),"Through parameter post--");Bridge.ClientTest.Batch2.CheckedUncheckedTests.AssertEqual("18446744073709551615",Bridge.ClientTest.Batch2.CheckedUncheckedTests.Bypass(min4=min4.dec()),"Through parameter --pre")}}}});Bridge.define("Bridge.ClientTest.Batch2.Constants",{statics:{fields:{BATCH_NAME:null,MODULE_ISSUES:null,MODULE_CHECKED_UNCKECKED:null},ctors:{init:function(){this.BATCH_NAME="Batch2";this.MODULE_ISSUES="Issues2";this.MODULE_CHECKED_UNCKECKED="Checked/Unckecked"}}}})});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJjb2RlLm1pbi5qcyIsCiAgInNvdXJjZVJvb3QiOiAiIiwKICAic291cmNlcyI6IFtdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICIiLAogICJzb3VyY2VzQ29udGVudCI6IFtdCn0K
